<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on nick forrer</title>
    <link>https://nwforrer.github.io/posts/</link>
    <description>Recent content in Posts on nick forrer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Jul 2019 17:05:00 -0400</lastBuildDate>
    
	<atom:link href="https://nwforrer.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Roguelike tutorial for Common Lisp - Part 3 - Generating a dungeon</title>
      <link>https://nwforrer.github.io/posts/roguelike-tutorial-part3/</link>
      <pubDate>Fri, 05 Jul 2019 17:05:00 -0400</pubDate>
      
      <guid>https://nwforrer.github.io/posts/roguelike-tutorial-part3/</guid>
      <description>This tutorial series is based on the Python Roguelike Tutorial. This will be covering Part 3 of that tutorial.
In this post, we&amp;rsquo;ll be procedurally generating the dungeon! We will generate randomly sized rooms, and connect them with tunnels for the player and npcs to walk around.
Looping over tiles First things first, we&amp;rsquo;re going to set all tiles to blocked by default. Previously, we had all tiles set as floors, and placed a couple of walls to test.</description>
    </item>
    
    <item>
      <title>Roguelike tutorial for Common Lisp - Part 2 - Generic entity and map</title>
      <link>https://nwforrer.github.io/posts/roguelike-tutorial-part2/</link>
      <pubDate>Thu, 27 Jun 2019 21:53:00 -0400</pubDate>
      
      <guid>https://nwforrer.github.io/posts/roguelike-tutorial-part2/</guid>
      <description>This tutorial series is based on the Python Roguelike Tutorial. This will be covering Part 2 of that tutorial.
It&amp;rsquo;s time to start thinking about how we want to structure our entities, and what the map will look like. We will be creating a generic entity class that all entities in the game will use, and introduce the concept of how the map will be structured. We&amp;rsquo;ll be using classes and generic methods provided with CLOS here.</description>
    </item>
    
    <item>
      <title>Roguelike tutorial for Common Lisp - Part 1 - Drawing the player</title>
      <link>https://nwforrer.github.io/posts/roguelike-tutorial-part1/</link>
      <pubDate>Tue, 25 Jun 2019 20:10:00 -0400</pubDate>
      
      <guid>https://nwforrer.github.io/posts/roguelike-tutorial-part1/</guid>
      <description>Welcome to the first part of the tutorial! If you haven&amp;rsquo;t already, please check out Part 0 to get the project created.
This tutorial series is based on the Python Roguelike Tutorial. This will be covering Part 1 of that tutorial as closely as possible, with the exception of different structure to support more idiomatic Common Lisp, and with using BearLibTerminal instead of tcod.
Opening a window First we&amp;rsquo;ll work on getting a window created.</description>
    </item>
    
    <item>
      <title>Roguelike tutorial for Common Lisp - Part 0 - Setup</title>
      <link>https://nwforrer.github.io/posts/roguelike-tutorial-part0/</link>
      <pubDate>Sun, 23 Jun 2019 10:24:00 -0400</pubDate>
      
      <guid>https://nwforrer.github.io/posts/roguelike-tutorial-part0/</guid>
      <description>This set of tutorials is going to follow the Python TCOD tutorial, but will be written in Common Lisp and use the BearLibTerminal library.
Prior Knowledge This tutorial assumes you are familiar with programming in Common Lisp. If you&amp;rsquo;re not familiar, I would highly recommend checking out A Road to Common Lisp on Steve Losh&amp;rsquo;s blog. It provides many valuable resources to get up to speed with Common Lisp, and is how I got started.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://nwforrer.github.io/posts/hello-world/</link>
      <pubDate>Sun, 23 Jun 2019 00:00:00 -0400</pubDate>
      
      <guid>https://nwforrer.github.io/posts/hello-world/</guid>
      <description>Testing the site</description>
    </item>
    
  </channel>
</rss>