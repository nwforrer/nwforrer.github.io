<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>roguelike on nick forrer</title>
    <link>https://nwforrer.github.io/tags/roguelike/</link>
    <description>Recent content in roguelike on nick forrer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Oct 2019 06:55:00 -0400</lastBuildDate>
    
	<atom:link href="https://nwforrer.github.io/tags/roguelike/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Roguelike tutorial for Common Lisp - Part 6 - Combat</title>
      <link>https://nwforrer.github.io/posts/roguelike-tutorial-part6/</link>
      <pubDate>Wed, 16 Oct 2019 06:55:00 -0400</pubDate>
      
      <guid>https://nwforrer.github.io/posts/roguelike-tutorial-part6/</guid>
      <description>This tutorial series is based on the Python Roguelike Tutorial. This will be covering Part 6 of that tutorial.
In this part, we will be adding a combat system, allowing players to kill monsters, as well as be killed. To accomplish this, we will also be adding a component system, and implementing an A* pathfinding algorithm. This will be a relatively long post, so let&amp;rsquo;s get right into it.</description>
    </item>
    
    <item>
      <title>Roguelike tutorial for Common Lisp - Part 5 - Placing enemies</title>
      <link>https://nwforrer.github.io/posts/roguelike-tutorial-part5/</link>
      <pubDate>Mon, 15 Jul 2019 23:19:00 -0400</pubDate>
      
      <guid>https://nwforrer.github.io/posts/roguelike-tutorial-part5/</guid>
      <description>This tutorial series is based on the Python Roguelike Tutorial. This will be covering Part 5 of that tutorial.
In this post, we&amp;rsquo;ll start adding enemies to the dungeon. We won&amp;rsquo;t be getting into the combat system yet, but we&amp;rsquo;ll get collision detection and turn-based movement working.
Placing enemies We&amp;rsquo;ll start by randomly placing enemies during the dungeon generation. Add a `place-entities` method in the game-map.lisp file:
(defun entity-at (entities x y) (dolist (entity entities) (if (and (= (entity/x entity) x) (= (entity/y entity) y)) (return entity)))) (defmethod place-entities ((map game-map) (room rect) entities max-enemies-per-room) (let ((num-monsters (random max-enemies-per-room))) (dotimes (monster-index num-monsters) (let ((x (+ (random (round (/ (- (rect/x2 room) (rect/x1 room) 1) 2))) (1+ (rect/x1 room)))) (y (+ (random (round (/ (- (rect/y2 room) (rect/y1 room) 1) 2))) (1+ (rect/y1 room))))) (unless (entity-at entities x y) (if (&amp;lt; (random 100) 80) (nconc entities (list (make-instance &amp;#39;entity :x x :y y :color (blt:green) :char #\o))) (nconc entities (list (make-instance &amp;#39;entity :x x :y y :color (blt:yellow) :char #\T))))))))) We choose a random number of entities to generate, from 0 up to the max-enemies-per-room passed in.</description>
    </item>
    
    <item>
      <title>Roguelike tutorial for Common Lisp - Part 4 - Field of view</title>
      <link>https://nwforrer.github.io/posts/roguelike-tutorial-part4/</link>
      <pubDate>Sun, 14 Jul 2019 22:43:00 -0400</pubDate>
      
      <guid>https://nwforrer.github.io/posts/roguelike-tutorial-part4/</guid>
      <description>This tutorial series is based on the Python Roguelike Tutorial. This will be covering Part 4 of that tutorial.
In this post, we&amp;rsquo;ll be computing the Field Of View (FOV) of the player. This will make exploring the dungeon much more interesting. When the game starts, only the tiles near the player will be visible. As the player explores the dungeon, the tiles that the player moves past will also become visible, allowing the map to be shown.</description>
    </item>
    
    <item>
      <title>Roguelike tutorial for Common Lisp - Part 3 - Generating a dungeon</title>
      <link>https://nwforrer.github.io/posts/roguelike-tutorial-part3/</link>
      <pubDate>Fri, 05 Jul 2019 17:05:00 -0400</pubDate>
      
      <guid>https://nwforrer.github.io/posts/roguelike-tutorial-part3/</guid>
      <description>This tutorial series is based on the Python Roguelike Tutorial. This will be covering Part 3 of that tutorial.
In this post, we&amp;rsquo;ll be procedurally generating the dungeon! We will generate randomly sized rooms, and connect them with tunnels for the player and npcs to walk around.
Looping over tiles First things first, we&amp;rsquo;re going to set all tiles to blocked by default. Previously, we had all tiles set as floors, and placed a couple of walls to test.</description>
    </item>
    
    <item>
      <title>Roguelike tutorial for Common Lisp - Part 2 - Generic entity and map</title>
      <link>https://nwforrer.github.io/posts/roguelike-tutorial-part2/</link>
      <pubDate>Thu, 27 Jun 2019 21:53:00 -0400</pubDate>
      
      <guid>https://nwforrer.github.io/posts/roguelike-tutorial-part2/</guid>
      <description>This tutorial series is based on the Python Roguelike Tutorial. This will be covering Part 2 of that tutorial.
It&amp;rsquo;s time to start thinking about how we want to structure our entities, and what the map will look like. We will be creating a generic entity class that all entities in the game will use, and introduce the concept of how the map will be structured. We&amp;rsquo;ll be using classes and generic methods provided with CLOS here.</description>
    </item>
    
    <item>
      <title>Roguelike tutorial for Common Lisp - Part 1 - Drawing the player</title>
      <link>https://nwforrer.github.io/posts/roguelike-tutorial-part1/</link>
      <pubDate>Tue, 25 Jun 2019 20:10:00 -0400</pubDate>
      
      <guid>https://nwforrer.github.io/posts/roguelike-tutorial-part1/</guid>
      <description>Welcome to the first part of the tutorial! If you haven&amp;rsquo;t already, please check out Part 0 to get the project created.
This tutorial series is based on the Python Roguelike Tutorial. This will be covering Part 1 of that tutorial as closely as possible, with the exception of different structure to support more idiomatic Common Lisp, and with using BearLibTerminal instead of tcod.
Opening a window First we&amp;rsquo;ll work on getting a window created.</description>
    </item>
    
    <item>
      <title>Roguelike tutorial for Common Lisp - Part 0 - Setup</title>
      <link>https://nwforrer.github.io/posts/roguelike-tutorial-part0/</link>
      <pubDate>Sun, 23 Jun 2019 10:24:00 -0400</pubDate>
      
      <guid>https://nwforrer.github.io/posts/roguelike-tutorial-part0/</guid>
      <description>This set of tutorials is going to follow the Python TCOD tutorial, but will be written in Common Lisp and use the BearLibTerminal library.
Prior Knowledge This tutorial assumes you are familiar with programming in Common Lisp. If you&amp;rsquo;re not familiar, I would highly recommend checking out A Road to Common Lisp on Steve Losh&amp;rsquo;s blog. It provides many valuable resources to get up to speed with Common Lisp, and is how I got started.</description>
    </item>
    
  </channel>
</rss>